@model MalzemeTaleplerViewModel
@{
    ViewData["LayoutTitle"] = "Malzeme Talep Oluştur";
}

<header class="page-header">
    <h2>@ViewData["LayoutTitle"]</h2>

    <div class="right-wrapper text-end">
        <ol class="breadcrumbs me-3">
            <li>
                <a asp-action="MalzemeTalepler"><span>Malzeme Talepler</span></a>
            </li>

            <li><span class="text-light">Malzeme Talep Oluştur</span></li>
        </ol>
    </div>
</header>

<form id="form" class="ecommerce-form action-buttons-fixed" asp-action="UrunGrupEkle" method="post">
    <section class="card">
        <div class="card-body">
            <table class="table table-bordered table-striped mb-0" id="datatable-editable">
                <thead>
                    <tr>
                        <th>Birim</th>
                        <th>Stok Grup</th>
                        <th>Stok</th>
                        <th>Stok Özellik</th>
                        <th>Açıklama</th>
                        <th>Boyutlar</th>
                        <th>Birimler</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
    </section>
    <div class="row action-buttons">
        <div class="col-12 col-md-auto">
            <button id="addToTable"
                class="btn btn-default btn-px-4 py-3 d-flex align-items-center font-weight-semibold line-height-1">
                <i class="fas fa-plus me-2"></i> Satır Ekle
            </button>
        </div>
        <div class="col-12 col-md-auto order-lg-1 mt-3 mt-md-0">
            <button type="submit"
                class="submit-button btn btn-primary btn-px-4 py-3 d-flex align-items-center font-weight-semibold line-height-1"
                data-loading-text="Loading...">
                <i class="bx bx-save text-4 me-2"></i> Kaydet
            </button>
        </div>
        <div class="col-12 col-md-auto ms-lg-auto px-md-0 mt-3 mt-md-0">
            <a asp-action="UrunGruplar"
                class="cancel-button btn btn-light btn-px-4 py-3 border font-weight-semibold text-color-dark text-3">İptal</a>
        </div>
    </div>
</form>

@section VendorStyles {
    <link rel="stylesheet" href="~/vendor/datatables/media/css/dataTables.bootstrap5.css" />
    <link rel="stylesheet" href="~/vendor/pnotify/pnotify.custom.css" />
    <style>
        table th,
        table td {
            border: none !important;
        }
    </style>
}

@section VendorScripts {
    <script src="~/vendor/datatables/media/js/jquery.dataTables.min.js"></script>
    <script src="~/vendor/datatables/media/js/dataTables.bootstrap5.min.js"></script>
    <script src="~/vendor/pnotify/pnotify.custom.js"></script>
    <script src="~/vendor/jquery-validation/jquery.validate.js"></script>
}

@section Scripts {
    <script>
        var stokGrups = @Html.Raw(Json.Serialize(Model.StokGrups));
        var stoks = @Html.Raw(Json.Serialize(Model.Stoks));
        var stokOzelliks = @Html.Raw(Json.Serialize(Model.StokOzelliks));

        (function ($) {
            "use strict";

            var EditableTable = {
                options: {
                    addButton: "#addToTable",
                    saveButton: "#saveAllRows",
                    table: "#datatable-editable",
                },

                initialize: function () {
                    this.setVars().build().events();
                    this.rowAdd();
                },

                setVars: function () {
                    this.$table = $(this.options.table);
                    this.$addButton = $(this.options.addButton);
                    return this;
                },

                build: function () {
                    this.datatable = this.$table.DataTable({
                        dom: '<"row"<"col-lg-6"><"col-lg-6">><"table-responsive"t>',
                        aoColumns: [null, null, null, null, null, null, null, { bSortable: false }]
                    });

                    window.dt = this.datatable;

                    return this;
                },

                events: function () {
                    var _self = this;

                    this.$table
                        .on("click", "a.cancel-row", function (e) {
                            e.preventDefault();
                            _self.rowCancel($(this).closest("tr"));
                        });

                    this.$addButton.on("click", function (e) {
                        e.preventDefault();
                        _self.rowAdd();
                    });

                    return this;
                },

                rowAdd: function () {
                    var _self = this;

                    var actions, data, $row;

                    actions = [
                        '<a href="#" class="hidden on-editing cancel-row text-danger"><i class="fas fa-trash-can fa-xl"></i></a>'
                    ].join(" ");

                    data = this.datatable.row.add(["", "", "", "", "", "", "", actions]);
                    $row = this.datatable.row(data[0]).nodes().to$();

                    $row.addClass("adding").find("td:last").addClass("actions");

                    this.rowEdit($row);

                    this.datatable.order([0, "asc"]).draw();
                },

                rowCancel: function ($row) {
                    var _self = this,
                        $actions,
                        i,
                        data;

                    if ($row.hasClass("adding")) {
                        this.rowRemove($row);
                    } else {
                        data = this.datatable.row($row.get(0)).data();
                        this.datatable.row($row.get(0)).data(data);

                        $actions = $row.find("td.actions");
                        if ($actions.get(0)) {
                            this.rowSetActionsDefault($row);
                        }

                        this.datatable.draw();
                    }
                },

                rowEdit: function ($row) {
                    var _self = this,
                        data,
                        rowIndex;

                    data = this.datatable.row($row.get(0)).data();

                    rowIndex = this.datatable.rows().count();

                    $row.children("td").each(function (i) {
                        var $this = $(this);

                        $this.addClass("align-content-center");

                        if ($this.hasClass("actions")) {
                            _self.rowSetActionsEditing($row);
                        } else {
                            var element = "";
                            var inputType = "text";
                            var inputClass = "form-control input-block";
                            var content = data[i];

                            if (i === 0) {
                                inputType = "number";
                                element =
                                    '<input type="' +
                                    inputType +
                                    '" class="' +
                                    inputClass +
                                    '" value="' +
                                    data[i] +
                                    '"/>';
                            } else if (i === 1) {
                                element = '<select class="' + inputClass + ' stok-grup-select" data-row-index="' + (rowIndex - 1) + '">';

                                for (var j = 0; j < stokGrups.length; j++) {
                                    var stokGrup = stokGrups[j];
                                    element += "<option value='" + stokGrup.id + "'>" + stokGrup.name + "</option>";
                                }

                                element += "</select>";
                            } else if (i === 2) {
                                element = '<select class="' + inputClass + ' stok-select" data-row-index="' + (rowIndex - 1) + '">';

                                for (var j = 0; j < stoks.length; j++) {
                                    var stok = stoks[j];
                                    if (stok.stokGrupId == 1)
                                        element += "<option value='" + stok.id + "'>" + stok.name + "</option>";
                                }

                                element += "</select>";
                            } else if (i === 3) {
                                element = '<select class="' + inputClass + ' stok-ozellik" data-row-index="' + (rowIndex - 1) + '">';

                                for (var j = 0; j < stokOzelliks.length; j++) {
                                    var stokOzellik = stokOzelliks[j];
                                    element += "<option value='" + stokOzellik.id + "'>" + stokOzellik.name + "</option>";
                                }

                                element += "</select>";
                            } else if (i === 4) {
                                element =
                                    '<input type="' +
                                    inputType +
                                    '" class="' +
                                    inputClass +
                                    '" value="' +
                                    data[i] +
                                    '"/>';
                            } else if (i === 5) {
                                element = '<div class="boyutlarDiv" data-row-index="' + (rowIndex - 1) + '">#Boyutlar</div>';
                            } else if (i === 6) {
                                element = '<div>#Birimler</div>';
                            }

                            $this.html(element);
                        }
                    });
                },

                rowRemove: function ($row) {
                    if ($row.hasClass("adding")) {
                        this.$addButton.removeAttr("disabled");
                    }

                    this.datatable.row($row.get(0)).remove().draw();
                },

                rowSetActionsEditing: function ($row) {
                    $row.find(".on-editing").removeClass("hidden");
                    $row.find(".on-default").addClass("hidden");
                },

                rowSetActionsDefault: function ($row) {
                    $row.find(".on-editing").addClass("hidden");
                    $row.find(".on-default").removeClass("hidden");
                },
            };

            $(function () {
                EditableTable.initialize();
            });
        }).apply(this, [jQuery]);

        $(document).on('change', '.stok-grup-select', function () {
            var $stokGrupSelect = $(this);
            var rowIndex = $stokGrupSelect.data('row-index');

            $('.stok-select[data-row-index="' + rowIndex + '"]').empty();

            var stoksArr = stoks.filter(function (stok) {
                return stok.stokGrupId == $stokGrupSelect.val();
            });

            for (var i = 0; i < stoksArr.length; i++) {
                var stok = stoksArr[i];
                $('.stok-select[data-row-index="' + rowIndex + '"]').append('<option value="' + stok.id + '">' + stok.name + '</option>');
            }

            @* var lastRowIndex = Math.max.apply(null,
                $('.stok-grup-select').map(function () {
                    return parseInt($(this).data('row-index'), 10);
                }).get()
            );

            $(".stok-select[data-row-index='" + lastRowIndex + "']").trigger('change'); *@
            });

        $(document).on('change', '.stok-select', function () {
            var $stokSelect = $(this);
            var rowIndex = $stokSelect.data('row-index');

            $('.boyutlarDiv[data-row-index="' + rowIndex + '"]').empty();

            var stok = stoks.filter(function (item) {
                return item.id == $stokSelect.val();
            });

            @* if (str && str.trim() !== "") { *@
        });
    </script>
}